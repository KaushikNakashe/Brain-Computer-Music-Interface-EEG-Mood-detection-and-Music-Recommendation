from flask import Flask, request, jsonify
from flask_cors import CORS
import pandas as pd
import xgboost as xgb

# Load the trained XGBoost model from file
xgb_model = xgb.XGBClassifier()
xgb_model.load_model('model_stats')  # Use a relative path if the model file is in the same directory as your Flask app

# Dummy feature set for demonstration purposes
feature_sets = {
    1: [867800.4407, 471980, 6.900104876, 50.80997213, 2180252.207, 2329379.638, 1, 2705772.22, 126485, 1.977387859, 
        1.987173556, 6018831.272, 6552368.091, 1, 4569626.729, 22955, 1.05628166, -0.916309145, 7497253.216, 8725686.368,
        1, 876234.6441, 12828, 4.195956885, 16.15449388, 3707795.055, 3779221.971, 1, 2003533.407, 11757, 2.420546197, 
        3.993489661, 5460068.549, 5772451.874, 1, 1435115.068, 12142, 3.060309261, 7.62313235, 4700512.159, 4876461.979, 
        1, 296938.9153, 8656, 7.679968693, 58.98767646, 2179469, 2181226.244, 1, 289491.1356, 4153, 7.681071045, 58.99922155, 
        2179685.673, 2180437.76, 1, 1],
    
    2: [800066.661, 391960, 6.88429687, 50.50790364, 2191715.51, 2315665.412, 1, 2937197.254, 73503, 1.806017486, 
        1.308698637, 6300596.64, 6903028.787, 1, 2572974, 14184, 1.983484919, 2.001041645, 6069355.143, 6544685.623, 
        1, 1149772.847, 10847, 3.528674128, 10.81757121, 4244302.271, 4362425.427, 1, 1714128.542, 8720, 2.704851502, 
        5.501749379, 5103788.596, 5342788.786, 1, 5409104.915, 23391, 0.781757453, -1.438807393, 7888492.13, 9509574.49, 
        1, 4848017.847, 27990, 0.960154782, -1.117110298, 7640334.029, 8993807.834, 1, 1429205.051, 10870, 3.060392956, 
        7.623446316, 4702112.22, 4876242.716, 1, 2],
    
    3: [7138801.966, 65962, 0.316310947, -1.967172517, 8322046.243, 10910779.49, 1, 4563085.288, 24609, 1.056385347, 
        -0.916246009, 7502484.016, 8726682.777, 1, 2852656.559, 13480, 1.808117231, 1.312683923, 6335612.086, 6899079.018, 
        1, 5156799.356, 84209, 0.868827836, -1.289965349, 7753707.866, 9257082.826, 1, 10457.10169, 8882, 1.204920074, 
        1.073825412, 6480.617868, 12273.44884, 1, 9285.576271, 8233, 1.140451589, 1.608291082, 4582.847813, 10337.71959, 
        1, 5229.474576, 4370, 3.22220603, 17.09529461, 3429.997217, 6238.018956, 1, 2661.135593, 2025, 6.055730321, 
        41.92457784, 3567.37706, 4426.299106, 1, 3],
    
    4: [2104662.593, 47511, 2.413642012, 3.973439327, 5425829.915, 5776699.586, 1, 4284713.847, 24047, 1.158384645, 
        -0.682293457, 7343252.22, 8447968.441, 1, 1144808.949, 8410, 3.528759804, 10.81794503, 4245379.559, 4362150.428, 
        1, 1144617.797, 7349, 3.528761445, 10.81795833, 4245832.632, 4362533.743, 1, 2282380.712, 12017, 2.184753919, 
        2.869314676, 5779700.511, 6168307.249, 1, 4271548.661, 22420, 1.158480694, -0.682220754, 7347875.7, 8445253.037, 
        1, 583138.1186, 15059, 5.286480391, 26.85705019, 3053779.098, 3083432.566, 1, 7283.338983, 6108, 1.104557886, 
        0.657098696, 5786.932192, 9271.893432, 1, 4]
}

app = Flask(__name__)
CORS(app)

# Route to handle predictions
@app.route('/predict', methods=['POST'])
def predict():
    # Get the user_id from the request
    user_id = request.json['user_id']

    # Retrieve the feature set for the selected user ID
    feature_values = feature_sets.get(user_id)

    if feature_values is None:
        return jsonify({'error': 'User ID not found'}), 400

    # Make predictions using the trained XGBoost model with the adjusted feature set
    prediction = xgb_model.predict([feature_values])

    # Return the prediction as JSON response
    return jsonify({
        'current_mood': str(prediction[0]),  # Assuming prediction is the mood
    })

if __name__ == '__main__':
    app.run(debug=True)

if __name__ == '__main__':
    app.run(debug=True)
